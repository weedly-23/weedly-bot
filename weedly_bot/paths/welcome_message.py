import logging
from loguru import logger
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from weedly_bot.loader import dp
from weedly_bot.loader import api_client

logger = logging.getLogger(__name__)


main_menu = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏'),
                                           KeyboardButton(text='üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏')],
                                          [KeyboardButton(text='‚ùì –û –±–æ—Ç–µ'),
                                           KeyboardButton(text='üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')],
                                          ], row_width=2
                                )

welcome_text = '*–≠—Ç–æ Weedly*\n\n'\
               '–ö–∞–∫ Feedly, —Ç–æ–ª—å–∫–æ —É–¥–æ–±–Ω–µ–µ\n\n'\
               '–•–≤–∞—Ç–∏—Ç –∑–∞–ª–∏–ø–∞—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö. –ß–∏—Ç–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ.\n\n'\
               '*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:* \n\n–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫–∏ RSS-—Ñ–∏–¥–æ–≤ –ª—é–±–∏–º—ã—Ö –∏–∑–¥–∞–Ω–∏–π –∏ —Å–∞–π—Ç–æ–≤ –∏ —á–∏—Ç–∞–π –∏—Ö –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ. '\
               '–ü–æ–ª—É—á–∞–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n'\
               '–ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —é—Ç—É–±-–∫–∞–Ω–∞–ª –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã—Ö–æ–¥—è—â–∏–º–∏ –Ω–∞ –Ω–µ–º –≤–∏–¥–µ–æ.\n\n'\
               '–ù–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!'


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    user_name = message.from_user.username
    api_client.users.add_user(uid=user_id, name=user_name)

    logger.debug('—é–∑–µ—Ä %s –Ω–∞–∂–∞–ª –Ω–∞ —Å—Ç–∞—Ä—Ç', message.from_user.id)

    await message.answer(text=welcome_text, reply_markup=main_menu, parse_mode='Markdown')


@dp.callback_query_handler(text_contains='back_to_start')
async def start_2(call: types.CallbackQuery):

    await call.message.answer(text=welcome_text, reply_markup=main_menu, parse_mode='Markdown')
